# Generated by Django 4.2.4 on 2025-02-24 11:42

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("snowAIWeb", "0036_backtestmodels"),
    ]

    operations = [
        migrations.CreateModel(
            name="BacktestResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.DateField(help_text="Start date of the backtest.")),
                ("end", models.DateField(help_text="End date of the backtest.")),
                (
                    "duration",
                    models.CharField(
                        help_text="Duration of the backtest.", max_length=100
                    ),
                ),
                (
                    "exposure_time",
                    models.FloatField(help_text="Exposure time percentage."),
                ),
                (
                    "equity_final",
                    models.FloatField(help_text="Final equity in dollars."),
                ),
                ("equity_peak", models.FloatField(help_text="Peak equity in dollars.")),
                (
                    "return_percent",
                    models.FloatField(help_text="Total return percentage."),
                ),
                (
                    "buy_hold_return",
                    models.FloatField(help_text="Buy & Hold return percentage."),
                ),
                (
                    "annual_return",
                    models.FloatField(help_text="Annualized return percentage."),
                ),
                (
                    "volatility_annual",
                    models.FloatField(help_text="Annualized volatility percentage."),
                ),
                (
                    "sharpe_ratio",
                    models.FloatField(help_text="Sharpe ratio of the strategy."),
                ),
                (
                    "sortino_ratio",
                    models.FloatField(help_text="Sortino ratio of the strategy."),
                ),
                (
                    "calmar_ratio",
                    models.FloatField(help_text="Calmar ratio of the strategy."),
                ),
                (
                    "max_drawdown",
                    models.FloatField(help_text="Maximum drawdown percentage."),
                ),
                (
                    "avg_drawdown",
                    models.FloatField(help_text="Average drawdown percentage."),
                ),
                (
                    "max_drawdown_duration",
                    models.CharField(
                        help_text="Maximum drawdown duration.", max_length=100
                    ),
                ),
                (
                    "avg_drawdown_duration",
                    models.CharField(
                        help_text="Average drawdown duration.", max_length=100
                    ),
                ),
                (
                    "num_trades",
                    models.IntegerField(help_text="Total number of trades."),
                ),
                ("win_rate", models.FloatField(help_text="Win rate percentage.")),
                ("best_trade", models.FloatField(help_text="Best trade percentage.")),
                ("worst_trade", models.FloatField(help_text="Worst trade percentage.")),
                ("avg_trade", models.FloatField(help_text="Average trade percentage.")),
                (
                    "max_trade_duration",
                    models.CharField(
                        help_text="Maximum trade duration.", max_length=100
                    ),
                ),
                (
                    "avg_trade_duration",
                    models.CharField(
                        help_text="Average trade duration.", max_length=100
                    ),
                ),
                (
                    "profit_factor",
                    models.FloatField(help_text="Profit factor of the strategy."),
                ),
                ("expectancy", models.FloatField(help_text="Expectancy percentage.")),
                (
                    "plot_json",
                    models.JSONField(
                        blank=True, help_text="Plot data in JSON format.", null=True
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Record creation timestamp."
                    ),
                ),
            ],
        ),
    ]
