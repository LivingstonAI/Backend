# Generated by Django 4.2.4 on 2025-09-02 08:27

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ("snowAIWeb", "0058_papergpt_category"),
    ]

    operations = [
        migrations.CreateModel(
            name="SnowAIMLModelLogEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("snowai_model_name", models.CharField(db_index=True, max_length=255)),
                (
                    "snowai_model_type",
                    models.CharField(
                        choices=[
                            ("classification", "Classification"),
                            ("regression", "Regression"),
                            ("neural_network", "Neural Network"),
                            ("deep_learning", "Deep Learning"),
                            ("ensemble", "Ensemble"),
                            ("time_series", "Time Series"),
                            ("nlp", "Natural Language Processing"),
                            ("computer_vision", "Computer Vision"),
                            ("other", "Other"),
                        ],
                        max_length=100,
                    ),
                ),
                ("snowai_tags", models.TextField(help_text="Comma-separated tags")),
                ("snowai_description", models.TextField(blank=True, null=True)),
                (
                    "snowai_code_used",
                    models.TextField(help_text="Full code implementation"),
                ),
                (
                    "snowai_colab_notebook_url",
                    models.URLField(
                        blank=True, help_text="Google Colab notebook URL", null=True
                    ),
                ),
                (
                    "snowai_framework_used",
                    models.CharField(
                        blank=True,
                        help_text="e.g., TensorFlow, PyTorch, Scikit-learn",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "snowai_dataset_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("snowai_dataset_description", models.TextField(blank=True, null=True)),
                (
                    "snowai_dataset_size",
                    models.IntegerField(
                        blank=True, help_text="Number of records", null=True
                    ),
                ),
                (
                    "snowai_dataset_features",
                    models.IntegerField(
                        blank=True, help_text="Number of features", null=True
                    ),
                ),
                (
                    "snowai_dataset_source",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "snowai_financial_market_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("stocks", "Stocks"),
                            ("forex", "Forex"),
                            ("crypto", "Cryptocurrency"),
                            ("bonds", "Bonds"),
                            ("commodities", "Commodities"),
                            ("indices", "Market Indices"),
                            ("options", "Options"),
                            ("futures", "Futures"),
                            ("mixed", "Mixed Markets"),
                        ],
                        max_length=100,
                        null=True,
                    ),
                ),
                ("snowai_accuracy_score", models.FloatField(blank=True, null=True)),
                ("snowai_precision_score", models.FloatField(blank=True, null=True)),
                ("snowai_recall_score", models.FloatField(blank=True, null=True)),
                ("snowai_f1_score", models.FloatField(blank=True, null=True)),
                (
                    "snowai_mae_score",
                    models.FloatField(
                        blank=True, help_text="Mean Absolute Error", null=True
                    ),
                ),
                (
                    "snowai_mse_score",
                    models.FloatField(
                        blank=True, help_text="Mean Squared Error", null=True
                    ),
                ),
                (
                    "snowai_rmse_score",
                    models.FloatField(
                        blank=True, help_text="Root Mean Squared Error", null=True
                    ),
                ),
                (
                    "snowai_r2_score",
                    models.FloatField(blank=True, help_text="R-squared", null=True),
                ),
                (
                    "snowai_auc_score",
                    models.FloatField(
                        blank=True, help_text="Area Under Curve", null=True
                    ),
                ),
                (
                    "snowai_custom_metrics",
                    models.JSONField(
                        blank=True,
                        help_text="Additional custom metrics as JSON",
                        null=True,
                    ),
                ),
                (
                    "snowai_training_duration",
                    models.FloatField(
                        blank=True, help_text="Training time in minutes", null=True
                    ),
                ),
                ("snowai_epochs_trained", models.IntegerField(blank=True, null=True)),
                ("snowai_batch_size", models.IntegerField(blank=True, null=True)),
                ("snowai_learning_rate", models.FloatField(blank=True, null=True)),
                (
                    "snowai_optimizer_used",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "snowai_profit_loss",
                    models.FloatField(
                        blank=True, help_text="P&L from backtesting", null=True
                    ),
                ),
                ("snowai_sharpe_ratio", models.FloatField(blank=True, null=True)),
                ("snowai_max_drawdown", models.FloatField(blank=True, null=True)),
                (
                    "snowai_win_rate",
                    models.FloatField(
                        blank=True, help_text="Percentage of winning trades", null=True
                    ),
                ),
                (
                    "snowai_roi_percentage",
                    models.FloatField(
                        blank=True, help_text="Return on Investment %", null=True
                    ),
                ),
                (
                    "snowai_created_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("snowai_updated_at", models.DateTimeField(auto_now=True)),
                (
                    "snowai_status",
                    models.CharField(
                        choices=[
                            ("experimental", "Experimental"),
                            ("validated", "Validated"),
                            ("production", "Production"),
                            ("deprecated", "Deprecated"),
                        ],
                        default="experimental",
                        max_length=50,
                    ),
                ),
                ("snowai_notes", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "SnowAI ML Model Log Entry",
                "verbose_name_plural": "SnowAI ML Model Log Entries",
                "db_table": "snowai_ml_model_log_entries",
                "ordering": ["-snowai_created_at"],
            },
        ),
        migrations.CreateModel(
            name="SnowAIModelDatasetFile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("snowai_file_name", models.CharField(max_length=255)),
                (
                    "snowai_file_type",
                    models.CharField(
                        choices=[
                            ("csv", "CSV"),
                            ("json", "JSON"),
                            ("parquet", "Parquet"),
                            ("excel", "Excel"),
                            ("other", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "snowai_file_size",
                    models.IntegerField(help_text="File size in bytes"),
                ),
                (
                    "snowai_external_url",
                    models.URLField(
                        help_text="Persistent URL to dataset (e.g., Google Drive, Dropbox)"
                    ),
                ),
                (
                    "snowai_file_hash",
                    models.CharField(
                        blank=True,
                        help_text="SHA-256 hash for integrity",
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "snowai_upload_date",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("snowai_description", models.TextField(blank=True, null=True)),
                (
                    "snowai_log_entry",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="snowai_dataset_files",
                        to="snowAIWeb.snowaimlmodellogentry",
                    ),
                ),
            ],
            options={
                "db_table": "snowai_model_dataset_files",
                "ordering": ["-snowai_upload_date"],
            },
        ),
    ]
